<?xml version="1.0" ?>
<launch>
  <arg name="arm_controller" default="trajectory" doc="Which arm controller to start. Options are trajectory, velocity, position" />

  <arg name="robot_x"   default="0.0" />
  <arg name="robot_y"   default="0.0" />
  <arg name="robot_yaw" default="0.0" />

  <arg name="tf_prefix"  default="mobipick" doc="tf_prefix to be used by gazebo plugins and in the robots urdf etc." />
  <arg name="robot_name" default="mobipick" doc="Sets the name of the robot in gazebo" />
  <arg name="robot"      default="mobipick-os" doc="Which variant of the mobipick? Can be 'mobipick-hb' or 'mobipick-os'" />

  <arg name="prefix" value="$(arg tf_prefix)/" if="$(eval tf_prefix != '')" /> <!-- $(arg prefix) is used in all the config files! TODO: For multiple robots, create groups when loading the parameters to overwrite the arg? -->
  <arg name="prefix" value=""                  unless="$(eval tf_prefix != '')" /> <!-- Cannot use '$(arg tf_prefix)/' instead because '/' would be included if tf_prefix = '', and tf frames cannot start with '/' in tf2 -->


  <!-- Load URDF -->
  <!-- URDF -->
  <include file="$(find mobipick_description)/launch/mobipick/upload_mobipick_description.launch">
    <arg name="robot" value="$(arg robot)" />
    <arg name="tf_prefix" value="$(arg tf_prefix)" />
    <arg unless="$(eval arm_controller=='position')" name="transmission_hw_interface" value="hardware_interface/VelocityJointInterface" />
    <arg if="$(eval arm_controller=='position')"     name="transmission_hw_interface" value="hardware_interface/PositionJointInterface" />
  </include>


  <!-- Load gazebo controller configurations -->
  <!-- Note: You MUST load these PID parameters for all joints that are using
       the PositionJointInterface, otherwise the arm + gripper will act like a
       giant parachute, counteracting gravity, and causing some of the wheels
       to lose contact with the ground, so the robot won't be able to properly
       navigate. See
       https://github.com/ros-simulation/gazebo_ros_pkgs/issues/612 -->
  <rosparam file="$(find mobipick_gazebo)/config/robotiq_2f_140/gazebo_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find mobipick_gazebo)/config/robotiq_2f_140/gazebo_mimic_joint.yaml" command="load" subst_value="true" />

  <!-- Spawn the robot into Gazebo -->
  <!-- Don't set ur5_shoulder_lift_joint to values smaller than -2.16 (for example, -2.60), otherwise Gazebo adds 2 pi to the reported joint_states -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name)
    -J $(arg prefix)ur5_shoulder_pan_joint 0.00
    -J $(arg prefix)ur5_shoulder_lift_joint -2.10
    -J $(arg prefix)ur5_elbow_joint 2.43
    -J $(arg prefix)ur5_wrist_1_joint -2.05
    -J $(arg prefix)ur5_wrist_2_joint -1.57
    -J $(arg prefix)ur5_wrist_3_joint 3.14
    -x $(arg robot_x) -y $(arg robot_y) -Y $(arg robot_yaw) " />

  <!-- Load ros_control controller configurations -->
  <rosparam file="$(find mobipick_description)/config/joint_state_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find mobipick_description)/config/ur5/arm_controller_ur5.yaml" command="load" subst_value="true" />
  <rosparam file="$(find mobipick_description)/config/ur5/arm_velocity_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find mobipick_description)/config/ur5/arm_position_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find mobipick_description)/config/robotiq_2f_140/joint_trajectory_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find mir_description)/config/diffdrive_controller.yaml" command="load" subst_value="true" />

  <!-- Start the controllers -->
 <node name="controller_spawner" pkg="controller_manager" type="controller_manager" output="screen"
        args="spawn joint_state_controller mobile_base_controller gripper_controller" />

  <group if="$(eval arm_controller=='trajectory')">
    <node name="arm_controller_spawner"          pkg="controller_manager" type="controller_manager" output="screen" args="spawn arm_controller"/>
    <node name="arm_velocity_controller_spawner" pkg="controller_manager" type="controller_manager" output="screen" args="load arm_velocity_controller"/>
  </group>
  <group if="$(eval arm_controller=='velocity')">
    <node name="arm_controller_spawner"          pkg="controller_manager" type="controller_manager" output="screen" args="load arm_controller"/>
    <node name="arm_velocity_controller_spawner" pkg="controller_manager" type="controller_manager" output="screen" args="spawn arm_velocity_controller"/>
  </group>
  <group if="$(eval arm_controller=='position')">
    <node name="arm_position_controller_spawner" pkg="controller_manager" type="controller_manager" output="screen" args="spawn arm_position_controller"/>
  </group>

  <!-- EKF -->
  <include file="$(find mir_gazebo)/launch/includes/ekf.launch.xml">
      <arg name="tf_prefix" value="$(arg prefix)" />
  </include>

  <!-- Robot state publisher -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" />

  <!-- Load teleop -->
  <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
    <param name="default_topic" value="cmd_vel"/>
    <param name="default_vx_max" value="1.0" />
    <param name="default_vx_min" value="-1.0" />
    <param name="default_vw_max" value="1.5" />
    <param name="default_vw_min" value="-1.5" />
  </node>

  <node name="rqt_joint_trajectory_controller" pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller" />

  <!-- create combined scan topic -->
  <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/>
  <node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/>

  <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="b_scan" />
    <remap from="scan_filtered" to="b_scan_rep117" />
  </node>

  <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="f_scan" />
    <remap from="scan_filtered" to="f_scan_rep117" />
  </node>

  <!-- start pose teaching node. nice to open/close the gripper, and, well, teach poses -->
  <node name="pose_teacher" pkg="pose_teacher" type="teach_poses.py">
    <remap from="command" to="arm_controller/command" />
    <remap from="gripper" to="gripper_hw" />
  </node>
</launch>
