#!/usr/bin/env python

# Copyright (c) 2013-2015, Rethink Robotics
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the Rethink Robotics nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
from copy import copy

from math import pi

import actionlib
import rospy
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal, FollowJointTrajectoryResult, \
    JointTolerance
from trajectory_msgs.msg import JointTrajectoryPoint
from sensor_msgs.msg import JointState

JOINT_NAMES = ['ur5_shoulder_pan_joint', 'ur5_shoulder_lift_joint', 'ur5_elbow_joint', 'ur5_wrist_1_joint',
               'ur5_wrist_2_joint', 'ur5_wrist_3_joint']


def normalize_angle(angle):
    """

    :param angle:
    :type angle: float
    :return:
    """
    while angle < -pi:
        angle += 2 * pi
    while angle > pi:
        angle -= 2 * pi
    return angle


class Trajectory(object):
    def __init__(self):
        ns = 'arm_controller/'
        self._client = actionlib.SimpleActionClient(
            ns + "follow_joint_trajectory",
            FollowJointTrajectoryAction,
        )
        self._goal_time_tolerance = rospy.Time.from_seconds(10.0)

        server_up = self._client.wait_for_server(timeout=rospy.Duration.from_sec(10.0))
        if not server_up:
            rospy.logerr("Timed out waiting for Joint Trajectory"
                         " Action Server to connect. Start the action server"
                         " before running example.")
            rospy.signal_shutdown("Timed out waiting for Action Server")
            sys.exit(1)
        self.clear()

    def add_point(self, positions, time):
        point = JointTrajectoryPoint()
        point.positions = [normalize_angle(p) for p in positions]
        #point.positions[1] += 2* pi  # TODO WTF!?
        point.time_from_start = rospy.Duration(time)
        self._goal.trajectory.points.append(point)

    def start(self):
        self._goal.trajectory.header.stamp = rospy.Time.now()
        print '\n--- goal --------------------------------------'
        print self._goal
        self._client.send_goal(self._goal)

    def stop(self):
        self._client.cancel_goal()

    def wait(self, timeout=15.0):
        finished = self._client.wait_for_result(timeout=rospy.Duration.from_sec(timeout))
        if not finished:
            raise rospy.exceptions.ROSException("Goal didn't finish in time!")

    def result(self):
        return self._client.get_result()

    def clear(self):
        self._goal = FollowJointTrajectoryGoal()
        self._goal.goal_time_tolerance = self._goal_time_tolerance
        self._goal.trajectory.joint_names = JOINT_NAMES
        for j in JOINT_NAMES:
            tol = JointTolerance()
            tol.name = j
            tol.position = 0.2
            self._goal.path_tolerance.append(tol)


def print_result(res):
    """
    :param res:
    :type res: FollowJointTrajectoryResult
    :return:
    """
    error_codes = ['SUCCESSFUL', 'INVALID_GOAL', 'INVALID_JOINTS', 'OLD_HEADER_TIMESTAMP', 'PATH_TOLERANCE_VIOLATED',
                   'GOAL_TOLERANCE_VIOLATED']

    print '\n--- result --------------------------------------'
    print "error_code: %s (%d)" % (error_codes[-res.error_code], res.error_code)
    print "error_string: '%s'" % res.error_string
    print '-------------------------------------------------\n'


def main():
    """Joint Trajectory Example: Simple Action Client

    Creates a client of the Joint Trajectory Action Server
    to send commands of standard action type,
    control_msgs/FollowJointTrajectoryAction.
    """

    print("Initializing node... ")
    rospy.init_node("ur5_joint_trajectory_client")
    print("Getting robot state... ")
    joint_state = rospy.wait_for_message('joint_states', JointState, timeout=10.0)
    print("Running. Ctrl-c to quit")

    traj = Trajectory()
    rospy.on_shutdown(traj.stop)

    # Command Current Joint Positions first
    current_angles = [joint_state.position[joint_state.name.index(j)] for j in JOINT_NAMES]
    traj.add_point(current_angles, 1.0)

    goal_angles = [0.00, -2.60, 2.43, -2.05, -1.57, 1.57]
    traj.add_point(goal_angles, 5.0)
    traj.add_point([x * 0.75 for x in goal_angles], 10.0)
    traj.add_point([x * 1.1 for x in goal_angles], 15.0)
    traj.start()
    traj.wait(26.0)
    print_result(traj.result())
    print("Exiting - Joint Trajectory Action Test Complete")


if __name__ == "__main__":
    main()
