image: ros:kinetic

before_script:
  # Install ssh-agent if not already installed
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$SSH_PRIVATE_KEY")

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'


build:
  stage: build
  tags:
    - docker
  script:
    - export LANG="en_US.UTF-8"
    - export LC_ALL=$LANG
    - export CI_ROS_DISTRO="kinetic"
    - export CATKIN_WS=~/catkin_ws
    - export CATKIN_WS_SRC=${CATKIN_WS}/src
    - export CATKIN_PROJECT_DIR=$CATKIN_WS_SRC/mobipick

    # install sbpl library from source
    - cd $(mktemp -d)
    - git clone -b master https://github.com/sbpl/sbpl.git
    - cd sbpl
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make install

    # create a catkin workspace and clone all required ROS packages
    - mkdir -p $CATKIN_WS_SRC
    - cd $CATKIN_WS_SRC/
    - ln -s $CI_PROJECT_DIR $CATKIN_PROJECT_DIR   # outside CI, run this instead: git clone -b kinetic git@git.hb.dfki.de:mobipick/mobipick.git
    - git clone -b master https://github.com/roboticsgroup/roboticsgroup_gazebo_plugins.git
    - git clone -b master https://github.com/JenniferBuehler/general-message-pkgs.git
    - git clone -b master https://github.com/JenniferBuehler/gazebo-pkgs.git
    - git clone -b kinetic https://github.com/uos/uos_tools.git
    - git clone -b indigo-devel https://github.com/ricardo-samaniego/sbpl_lattice_planner.git
    - git clone -b kinetic https://github.com/dfki-ric/mir_robot.git

    # use rosdep to install all dependencies (including ROS itself)
    - apt-get update -qq
    - apt-get install -qq -y python-rosdep
    # - sudo rosdep init   # not needed in CI, because the Docker image already has rosdep initialized
    - rosdep update
    - rosdep install --from-paths ./ -i -y --rosdistro $CI_ROS_DISTRO --skip-keys=pico_flexx_driver --skip-keys=sbpl

    # build all packages in the catkin workspace
    - source /opt/ros/${CI_ROS_DISTRO}/setup.bash
    - catkin_init_workspace
    - cd $CATKIN_WS
    - catkin_make -DCMAKE_BUILD_TYPE=Release install
    - source install/setup.bash   # not strictly necessary, but checks if everything was properly installed

    # NOTE on testing: `catkin_make run_tests` will show the output of the tests
    # (gtest, nosetest, etc..) but always returns 0 (success) even if a test
    # fails. Running `catkin_test_results` aggregates all the results and returns
    # non-zero when a test fails (which notifies Gitlab CI that the build failed).
    - catkin_make -DCMAKE_BUILD_TYPE=Release run_tests
    - catkin_test_results

    # catkin_lint
    - apt-get install -y python-catkin-lint
    - cd $CATKIN_PROJECT_DIR
    - catkin_lint .

software_catalogue_entry:
  image: d-reg.hb.dfki.de:5000/ubuntu:overview_generator
  stage: deploy
  tags:
    - docker
  script:
    - cd .ci
    - apt-get update -qq
    - apt-get install -y wget
    - wget http://bob.dfki.uni-bremen.de/software_overview/generate.sh
    - sh generate.sh $CI_PROJECT_NAMESPACE $CI_PROJECT_NAME $CI_PROJECT_URL
  only:
    - kinetic
