<launch>
  <arg name="namespace" default="mobipick" doc="Namespace to push all topics into"/>
  <arg name="tf_prefix" default="mobipick" doc="TF prefix to use for all of Mobipick's TF frames"/>

  <arg name="robot_version" default="os" doc="Can be hb or os, changes some parts in the urdf, hardware serials etc." />
  <arg name="main_camera" default="astra"
    doc="Can be 'astra' for Orbbec Astra Mini S, 'intel_d455' for Intel RealSense D455 or 'intel_d435' for Intel RealSense D435, changes the main 3D camera." />

  <!-- $(arg prefix) is used in most of the config files, whenever subst_value=true -->
  <arg name="prefix" value="$(arg tf_prefix)/" if="$(eval tf_prefix != '')" />
  <arg name="prefix" value=""                  unless="$(eval tf_prefix != '')" />

  <arg name="mir_hostname" default="192.168.12.20" />

  <arg name="ur5_kinematics_file" default="$(find mobipick_description)/config/ur5_calibration.yaml" />

  <arg name="ir_processing" default="false" doc="Whether to publish the rectified IR image of the Astra. Only needed for calibration." />

  <group ns="$(arg namespace)">
    <!-- not needed, use xacro and rosparam with subst_value instead
    <param name="tf_prefix" type="string" value="$(arg tf_prefix)"/>
    -->

    <!-- URDF -->
    <include file="$(find mobipick_description)/launch/mobipick/upload_mobipick_description.launch">
      <arg name="robot" value="mobipick-$(arg robot_version)" />
      <arg name="main_camera" value="$(arg main_camera)" />
      <arg name="tf_prefix" value="$(arg tf_prefix)" />
      <arg name="ur5_kinematics_file" value="$(arg ur5_kinematics_file)" />
      <arg name="transmission_hw_interface" value="hardware_interface/PositionJointInterface" />
    </include>

    <!-- ur5 controller configs -->
    <!-- <rosparam command="load" file="$(find mobipick_bringup)/config/ur5_controllers.yaml" subst_value="True" /> -->


    <!-- Robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
      <remap from="/tf"        to="tf_robot_state_publisher" />
      <remap from="/tf_static" to="tf_static_robot_state_publisher" />
    </node>

    <!-- remove those TFs that are also published by the MiR to avoid conflicts -->
    <node name="tf_remove_child_frames" pkg="mir_driver" type="tf_remove_child_frames.py" output="screen">
      <remap from="tf_in"         to="tf_robot_state_publisher" />
      <remap from="tf_out"        to="/tf" />
      <remap from="tf_static_in"  to="tf_static_robot_state_publisher" />
      <remap from="tf_static_out" to="/tf_static" />
      <rosparam param="remove_frames" subst_value="True">
        - $(arg prefix)base_link
        - $(arg prefix)front_laser_link
        - $(arg prefix)back_laser_link
        - $(arg prefix)camera_top_link
        - $(arg prefix)camera_top_depth_optical_frame
        - $(arg prefix)camera_floor_link
        - $(arg prefix)camera_floor_depth_optical_frame
        - $(arg prefix)imu_link
      </rosparam>
    </node>

    <!-- MiR base -->
    <node name="mir_bridge" pkg="mir_driver" type="mir_bridge.py" output="screen">
      <param name="hostname" value="$(arg mir_hostname)" />
      <param name="tf_prefix" value="$(arg tf_prefix)" />
    </node>

    <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
      <remap from="scan" to="b_scan" />
      <remap from="scan_filtered" to="b_scan_rep117" />
    </node>

    <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
      <remap from="scan" to="f_scan" />
      <remap from="scan_filtered" to="f_scan_rep117" />
    </node>

    <node name="fake_mir_joint_publisher" pkg="mir_driver" type="fake_mir_joint_publisher.py" output="screen">
      <param name="prefix" value="$(arg prefix)" />
      <remap from="joint_states" to="mir_joint_states" />
    </node>

    <!-- a joint state publisher to get the mimic joints of the gripper, too! -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <rosparam param="source_list">[joint_states, gripper_joint_states, mir_joint_states, ur5_joint_states]</rosparam>
      <param name="rate" value="200." />
    </node>

    <!-- EEF Main camera -->
    <group if="$(eval main_camera=='astra')">
      <include file="$(find mobipick_bringup)/launch/includes/gripper_astra.launch.xml">
        <arg name="tf_prefix"     value="$(arg tf_prefix)" />
        <arg name="robot_version" value="$(arg robot_version)" />
        <arg name="ir_processing" value="$(arg ir_processing)" />
      </include>
    </group>
    <group if="$(eval main_camera=='intel_d455' or main_camera=='intel_d435')">
      <include file="$(find realsense2_camera)/launch/rs_camera.launch">
        <arg name="camera" value="eef_main_cam" />
      </include>
    </group>

    <!-- Pico Flexx gripper camera -->
    <include file="$(find pico_flexx_driver)/launch/pico_flexx_driver.launch">
      <arg name="base_name" value="eef_forward_cam" />
      <arg name="max_noise" value="0.015" />
    </include>


    <!-- start moveit -->
    <include file="$(find mobipick_moveit_config)/launch/move_group.launch">
      <arg name="robot_version" value="$(arg robot_version)" />
      <arg name="prefix" value="$(arg tf_prefix)" />
      <arg name="use_pointcloud" value="false" />
    </include>

    <!-- start pose teaching node. nice to open/close the gripper, and, well, teach poses -->
    <node name="pose_teacher" pkg="pose_teacher" type="teach_poses.py">
      <remap from="command" to="arm_controller/command" />
      <remap from="gripper" to="gripper_hw" />
    </node>
  </group>
</launch>
