<launch>
  <arg name="namespace" default="mobipick" doc="Namespace to push all topics into"/>
  <arg name="tf_prefix" default="mobipick" doc="TF prefix to use for all of Mobipick's TF frames"/>

  <arg name="robot_version" default="os" doc="Can be hb or os, changes some parts in the urdf" />

  <!-- $(arg prefix) is used in most of the config files, whenever subst_value=true -->
  <arg name="prefix" value="$(arg tf_prefix)/" if="$(eval tf_prefix != '')" />
  <arg name="prefix" value=""                  unless="$(eval tf_prefix != '')" />

  <arg name="mir_hostname" default="192.168.12.20" />

  <!-- 16112110432 = mobipick-hb -->
  <!-- 16112210198 = mobipick-os -->
  <arg name="astra_serial" default="16112210198" if="$(eval robot_version=='os')" doc="serial number of the camera (see back of camera, or `rosrun astra_camera astra_list_devices`)" />
  <arg name="astra_serial" default="16112110432" if="$(eval robot_version=='hb')" />

  <arg name="ur5_kinematics_file" default="$(find mobipick_description)/config/ur5_calibration.yaml" />

  <arg name="ir_processing" default="false" doc="Whether to publish the rectified IR image of the Astra. Only needed for calibration." />

  <arg name="simulation" default="false" doc="Whether a gazebo simulation of the real robot is used."/>

  <group ns="$(arg namespace)">
    <!-- not needed, use xacro and rosparam with subst_value instead
    <param name="tf_prefix" type="string" value="$(arg tf_prefix)"/> 
    -->

    <!-- URDF -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find mobipick_description)/urdf/mobipick/mobipick_v1_model.urdf.xacro tf_prefix:=$(arg tf_prefix) robot:=mobipick-$(arg robot_version) kinematics_config:=$(arg ur5_kinematics_file)" />

    <!-- ur5 controller configs -->
    <!-- <rosparam command="load" file="$(find mobipick_bringup)/config/ur5_controllers.yaml" subst_value="True" /> -->


    <!-- Robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
      <remap from="/tf"        to="tf_mobipick" />
      <remap from="/tf_static" to="tf_static_mobipick" />
    </node>

    <!-- remove those TFs that are also published by the MiR to avoid conflicts -->
    <node name="tf_remove_child_frames" pkg="mir_driver" type="tf_remove_child_frames.py" output="screen">
      <remap from="tf_in"         to="tf_mobipick" />
      <remap from="tf_out"        to="/tf" />
      <remap from="tf_static_in"  to="tf_static_mobipick" />
      <remap from="tf_static_out" to="/tf_static" />
      <rosparam param="remove_frames">
        - base_link
        - front_laser_link
        - back_laser_link
        - camera_top_link
        - camera_top_depth_optical_frame
        - camera_floor_link
        - camera_floor_depth_optical_frame
        - imu_link
      </rosparam>
    </node>
    
    <!-- MiR base -->
    <node name="mir_bridge" pkg="mir_driver" type="mir_bridge.py" output="screen">
      <param name="hostname" value="$(arg mir_hostname)" />
      <param name="tf_prefix" value="$(arg tf_prefix)" />
      <remap from="map" to="/map" />
      <remap from="map_metadata" to="/map_metadata" />
      <remap from="rosout" to="/rosout" />
      <remap from="rosout_agg" to="/rosout_agg" />
      <remap from="tf" to="/tf" />
    </node>

    <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
      <remap from="scan" to="b_scan" />
      <remap from="scan_filtered" to="b_scan_rep117" />
    </node>

    <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
      <remap from="scan" to="f_scan" />
      <remap from="scan_filtered" to="f_scan_rep117" />
    </node>

    <node name="fake_mir_joint_publisher" pkg="mir_driver" type="fake_mir_joint_publisher.py" output="screen">
      <param name="prefix" value="$(arg prefix)" />
    </node>

    <!-- a joint state publisher to get the mimic joints of the gripper, too! -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <rosparam param="source_list">[joint_states, gripper_joint_states]</rosparam>
      <param name="rate" value="200." />
    </node>

    <!-- MIR changed the name of the odometry frame, so a quick hack is to provide a static transform between old and new name -->
    <node name="odom_tf_name_fix" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 $(arg prefix)odom $(arg prefix)odom_comb 100" />

    <!-- UR5 joint trajectory server -->
    <node name="arm_joint_trajectory_forwarder" pkg="mobipick_pick_n_place" type="joint_trajectory_forwarder.py" output="screen">
      <param name="controller_name" value="arm_controller" />
    </node>

    <!-- gripper joint trajectory server -->
    <node name="gripper_joint_trajectory_forwarder" pkg="mobipick_pick_n_place" type="joint_trajectory_forwarder.py" output="screen">
      <param name="controller_name" value="gripper_controller" />
    </node>

    <!-- Astra gripper camera -->
    <!--
    <include file="$(find astra_launch)/launch/astra.launch">
      <arg name="camera"                value="gripper_astra" />
      <arg name="depth_registration"    value="false" />  
      <arg name="publish_tf"            value="false" />
      <arg name="depth_frame_id"        value="$(arg tf_prefix)/gripper_astra_depth_optical_frame" if="$(eval tf_prefix != '')" />
      <arg name="rgb_frame_id"          value="$(arg tf_prefix)/gripper_astra_rgb_optical_frame"   if="$(eval tf_prefix != '')" />
      <arg name="device_id"             value="$(arg astra_serial)" />
      <arg name="rgb_camera_info_url"   value="package://mobipick_bringup/camera_info/rgb_$(arg astra_serial).yaml" />
      <arg name="depth_camera_info_url" value="package://mobipick_bringup/camera_info/depth_$(arg astra_serial).yaml" />
      <arg name="ir_processing"         value="$(arg ir_processing)" />
    </include>
    <param name="gripper_astra/driver/data_skip" value="9" />
    -->


    <!-- reduced pointcloud to save same wifi bandwidth. -->
    <node pkg="nodelet" type="nodelet" name="reduce_astra_scans" args="standalone pcl/VoxelGrid">
      <remap from="~input" to="gripper_astra/depth/points" />
      <remap from="~output" to="gripper_astra/depth/points_reduced" />
      <rosparam>
        leaf_size: 0.05
        keep_organized: true
        filter_limit_max: 1000.0
      </rosparam>
    </node>


    <!-- This fixes two bugs with astra_camera:
         1. ir_processing expects the IR image at "ir/image_raw", but the
            astra_camera driver publishes "ir/image" instead.
         2. the astra_camera driver publishes "ir/image" as mono16, but it is
            incorrectly scaled to [0..255] (instead of [0..65536]), so converting
            it into a mono8 or RGB image will return values [0..1] (i.e., black
            image). Therefore we normalize it first.
    -->
    <node if="$(arg ir_processing)" name="normalize_image" pkg="mobipick_bringup" type="normalize_image" output="screen">
      <remap from="image_in" to="gripper_astra/ir/image" />
      <remap from="image_out" to="gripper_astra/ir/image_raw" />
    </node>

    <!-- Pico Flexx gripper camera -->
    <!--
    <include file="$(find pico_flexx_driver)/launch/pico_flexx_driver.launch">
      <arg name="base_name" value="gripper_pico_flexx" />
      <arg name="max_noise" value="0.015" />
    </include>
    -->


    <!-- start moveit -->
    <include file="$(find mobipick_moveit_config)/launch/move_group.launch">
        <arg name="prefix" value="$(arg tf_prefix)" />
        <arg name="use_pointcloud" value="false" />
        <arg name="simulation" value="$(arg simulation)" />
    </include>
  </group>
</launch>
