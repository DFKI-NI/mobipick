<launch>
  <arg name="namespace" default="mobipick" doc="Namespace to push all topics into"/>
  <arg name="tf_prefix" default=""         doc="TF prefix to use for all of Mobipick's TF frames"/>

  <arg name="mir_hostname" default="192.168.12.20" />

  <!-- 16112110432 = mobipick-hb -->
  <arg name="astra_serial" default="16112110432" doc="serial number of the camera (see back of camera, or `rosrun astra_camera astra_list_devices`)" />

  <arg name="ir_processing" default="false" doc="Whether to publish the rectified IR image of the Astra. Only needed for calibration." />

  <group ns="$(arg namespace)">
    <param name="tf_prefix" type="string" value="$(arg tf_prefix)"/>

    <!-- URDF -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find mobipick_description)/urdf/mobipick/mobipick_v1_model.urdf.xacro" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
    
    <!-- MiR base -->
    <node name="mir100_bridge" pkg="mir100_driver" type="mir100_bridge.py" output="screen">
      <param name="hostname" value="$(arg mir_hostname)" />
      <param name="tf_prefix" value="$(arg tf_prefix)" />
      <remap from="map" to="/map" />
      <remap from="map_metadata" to="/map_metadata" />
      <remap from="rosout" to="/rosout" />
      <remap from="rosout_agg" to="/rosout_agg" />
      <remap from="tf" to="/tf" />
    </node>

    <node name="rep117_laser_filter" pkg="mir100_driver" type="rep117_filter.py" output="screen">
      <remap from="scan_filtered" to="scan_rep117" />
    </node>

    <node name="fake_mir_joint_publisher" pkg="mir100_driver" type="fake_mir_joint_publisher.py" output="screen" />

    <!-- UR5 joint trajectory server -->
    <node name="arm_joint_trajectory_forwarder" pkg="mobipick_pick_n_place" type="joint_trajectory_forwarder.py" output="screen">
      <param name="controller_name" value="arm_controller" />
    </node>

    <!-- gripper joint trajectory server -->
    <node name="gripper_joint_trajectory_forwarder" pkg="mobipick_pick_n_place" type="joint_trajectory_forwarder.py" output="screen">
      <param name="controller_name" value="gripper_controller" />
    </node>

    <!-- Astra gripper camera -->
    <include file="$(find astra_launch)/launch/astra.launch">
      <arg name="camera"                value="gripper_astra" />
      <arg name="depth_registration"    value="false" />  <!-- depth_registration:=true leads to incorrect depth scaling! (objects in point cloud appear smaller than they are) -->
      <arg name="publish_tf"            value="false" />
      <arg name="depth_frame_id"        value="$(arg tf_prefix)/gripper_astra_depth_optical_frame" if="$(eval tf_prefix != '')" />
      <arg name="rgb_frame_id"          value="$(arg tf_prefix)/gripper_astra_rgb_optical_frame"   if="$(eval tf_prefix != '')" />
      <arg name="device_id"             value="$(arg astra_serial)" />
      <arg name="rgb_camera_info_url"   value="package://mobipick_bringup/camera_info/rgb_$(arg astra_serial).yaml" />
      <arg name="depth_camera_info_url" value="package://mobipick_bringup/camera_info/depth_$(arg astra_serial).yaml" />
      <arg name="ir_processing"         value="$(arg ir_processing)" />
    </include>
    <param name="gripper_astra/driver/data_skip" value="9" />

    <!-- This fixes two bugs with astra_camera:
         1. ir_processing expects the IR image at "ir/image_raw", but the
            astra_camera driver publishes "ir/image" instead.
         2. the astra_camera driver publishes "ir/image" as mono16, but it is
            incorrectly scaled to [0..255] (instead of [0..65536]), so converting
            it into a mono8 or RGB image will return values [0..1] (i.e., black
            image). Therefore we normalize it first.
    -->
    <node name="normalize_image" pkg="mobipick_bringup" type="normalize_image" output="screen">
      <remap from="image_in" to="gripper_astra/ir/image" />
      <remap from="image_out" to="gripper_astra/ir/image_raw" />
    </node>

    <!-- Pico Flexx gripper camera -->
    <include file="$(find pico_flexx_driver)/launch/pico_flexx_driver.launch">
      <arg name="base_name" value="gripper_pico_flexx" />
      <arg name="max_noise" value="0.015" />
    </include>
  </group>
</launch>
